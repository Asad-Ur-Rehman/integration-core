pipeline {
  agent {
    label "automation"
  }
  options {
    skipDefaultCheckout()
  }
  environment {
    gitAuthor = ""
  }
  triggers {
    pollSCM('*/5 * * * *')
  }

  stages {
    stage ("checkout") {
      steps {
        dir("integration-core") {
          checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'UserExclusion', excludedUsers: 'jenkins@signalvine.com'], [$class: 'LocalBranch', localBranch: env.BRANCH_NAME]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '96261e0c-0182-4871-9245-633f7d3ab357', url: 'git@github.com:signalvine/integration-core.git']]])
	  script {
	    gitAuthor = sh (script: 'git show --format="%aE" HEAD | head -n1', returnStdout: true).trim()
	  }
        }
      }
      post {
        failure {
          slackSend channel: '10pearls', color: 'danger', message: "integration-core checkout failed on ${env.BRANCH_NAME} (<${env.BUILD_URL}|Open>)"
        }
      }
    }

    stage ("test") {
      when { expression { gitAuthor != 'jenkins@signalvine.com' } }
      steps {
        sh 'cd ./integration-core/ci/ && ./unit.sh'
      }
      post {
        failure {
          slackSend channel: '10pearls', color: 'danger', message: "integration-core unit tests failed on ${env.BRANCH_NAME} (<${env.BUILD_URL}|Open>)"
        }
      }
    }

    stage ("build") {
      when { expression { gitAuthor != 'jenkins@signalvine.com' } }
      steps {
        sshagent(['63730a8e-8555-4018-8a30-6163e5d6c8e8']) {
	script {
		try {
		  sh script:'''#!/bin/bash
		    set -e
		    set -x
		  
		    cd integration-core
		    
		    rm -rf /target/*/*.jar BUILD_LOG
		    if [ "$BRANCH_NAME" = 'master' ]; then
		      git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
		      git config branch.$BRANCH_NAME.remote origin
		      git config branch.$BRANCH_NAME.merge refs/heads/$BRANCH_NAME
		      git config --global user.name "Jenkins"
		      git config --global user.email "jenkins@signalvine.com"
                      sbt "release with-defaults" -Dfinal=true > BUILD_LOG; BUILD_RESULT=$?; cat BUILD_LOG
		    else
		      sbt package > BUILD_LOG; BUILD_RESULT=$?; cat BUILD_LOG
		    fi
                    if [ "$BUILD_RESULT" = "1" ]; then
                      exit 1
                    fi
		  ''', returnStdout: true
		}
		catch (exc) {
		    def RESULT = readFile "integration-core/BUILD_LOG"
		    slackSend channel: '10pearls', color: 'danger', message: "*integration-core failed on ${env.BRANCH_NAME} (<${env.BUILD_URL}|Open>)*\n```\n${RESULT}\n```"
		    currentBuild.result = 'FAILURE'
		    return
		}
	    }
        }
      }
      post {
        success {
	  archiveArtifacts 'integration-core/target/scala*/*.jar'
	}
      }
    }
  }
  post {
    failure {
      slackSend channel: 'notifications', color: 'danger', message: 'integration-core build or publish failed'
    }

    success {
      slackSend channel: 'notifications', color: 'good', message: 'integration-core successfully built and published'
    }
  }
}
